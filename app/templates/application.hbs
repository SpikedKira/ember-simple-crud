<h1 id="title">Ember Simple CRUD</h1>

<div class='demo'>
    {{#link-to "company"}}Companies{{/link-to}}
    {{#link-to "employee"}}Employees{{/link-to}}
    {{#link-to "product"}}Products{{/link-to}}

    {{outlet}}
</div>

<h2>What's the Point?</h2>
<blockquote>
    This addon is designed to allow a developer to rapidly prototype application functionality without having to mess with the view layer.  When you need to scaffold out a large application with many models or need to whip up a quick proof-of-concept, this will get you there fast.
</blockquote>

<h2>Steps to Replicate This Demo</h2>

<h3>Setup a New Ember Application</h3>
<h4>Create an Ember Application</h4>
<span class='console'>ember new demo</span>
<span class='console'>cd demo</span>

<h3>Using Ember-Simple-CRUD</h3>
<h4>Install Ember-Simple-CRUD</h4>
<span class='console'>ember install ember-simple-crud</span>

<h4>Create the Root CRUD</h4>
<span class='console'>ember g crud-root</span>

<h4>Create CRUDs for Our Models</h4>
<span class='console'>ember g crud company</span>
<span class='console'>ember g crud employee</span>
<span class='console'>ember g crud product</span>

<h4>Setup the Models</h4>
<span class='code'>models/company.js
    <pre>
import DS from 'ember-data';
import CRUDRoot from './crud-root';

export default CRUDRoot.extend({
    name: DS.attr( 'string' ),

    products: DS.hasMany( 'product', {async: true} )
});
    </pre>
</span>

<span class='code'>models/employee.js
    <pre>
import Ember from 'ember';
import DS from 'ember-data';
import CRUDRoot from './crud-root';

export default CRUDRoot.extend({
    _identifier: Ember.computed(
        'firstName',
        'lastName',
        function() {
            return this.get( 'firstName' ) + " " + this.get( 'lastName' );
        }
    ),

    firstName: DS.attr( 'string' ),

    lastName: DS.attr( 'string' ),

    company: DS.belongsTo( 'company', {async: true} )
});
    </pre>
</span>

<span class='code'>models/product.js
    <pre>
import DS from 'ember-data';
import CRUDRoot from './crud-root';

export default CRUDRoot.extend({
    name: DS.attr( 'string' ),

    price: DS.attr( 'number' )
});
    </pre>
</span>

<blockquote class='danger'>
    You can stop here if you have a real API.  Really, that's it.  The models are all you need to start interacting with the data.
</blockquote>

<h3>Create a Fake Endpoint</h3>
<h4>Install Ember-CLI-Mirage</h4>
<span class='console'>ember install ember-cli-mirage</span>

<h4>Create Mirage Models</h4>
<span class='console'>ember g mirage-model company</span>
<span class='console'>ember g mirage-model employee</span>
<span class='console'>ember g mirage-model product</span>

<h4>Create Factories for Our Models</h4>
<span class='console'>ember g mirage-factory company</span>
<span class='console'>ember g mirage-factory employee</span>
<span class='console'>ember g mirage-factory product</span>

<h4>Setup the Factories</h4>
<span class='code'>mirage/factories/company.js
    <pre>
import Mirage, {faker} from 'ember-cli-mirage';

export default Mirage.Factory.extend({
  name() {
      return faker.company.companyName();
  },

  productIds() {
      const numbers = [];
      let n = 5;
      while( n-- ) {
        numbers.push( faker.random.number( 19 ) + 1 );
      }
      return [ ...new Set(numbers) ];
  }
});
    </pre>
</span>

<span class='code'>mirage/factories/employee.js
    <pre>
import Mirage, {faker} from 'ember-cli-mirage';

export default Mirage.Factory.extend({
  firstName() {
      return faker.name.firstName();
  },

  lastName() {
      return faker.name.lastName();
  },

  companyId() {
      return faker.random.number( 4 ) + 1;
  }
});
    </pre>
</span>

<span class='code'>mirage/factories/product.js
    <pre>
import Mirage, {faker} from 'ember-cli-mirage';

export default Mirage.Factory.extend({
  name() {
    return faker.commerce.productName();
  },

  price() {
    return faker.commerce.price();
  }
});
    </pre>
</span>

<h4>Add Endpoints to Mirage</h4>
<span class='code'>mirage/config.js
    <pre>
export default function() {
  this.get( '/companies' );
  this.get( '/companies/:id' );
  this.patch( '/companies/:id' );
  this.delete( '/companies/:id' );
  this.post( '/companies' );

  this.get( '/employees' );
  this.get( '/employees/:id' );
  this.patch( '/employees/:id' );
  this.delete( '/employees/:id' );
  this.post( '/employees' );

  this.get( '/products' );
  this.get( '/products/:id' );
  this.patch( '/products/:id' );
  this.delete( '/products/:id' );
  this.post( '/products' );
}
    </pre>
</span>

<h4>Seed the Mirage Database</h4>
<span class='code'>mirage/scenarios/default.js
    <pre>
export default function( server ) {
  server.createList( 'product', 20 );
  server.createList( 'company', 5 );
  server.createList( 'employee', 50 );
}
    </pre>
</span>
